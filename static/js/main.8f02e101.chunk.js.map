{"version":3,"sources":["components/card/card.data.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CARD_DATA","title","imageUrl","id","Card","props","imgSrc","monster","className","src","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAqDeA,EArDG,CAChB,CACEC,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,QACPC,SAAU,eACVC,GAAI,GAEN,CACEF,MAAO,SACPC,SAAU,gBACVC,GAAI,KCjCOC,G,MAZF,SAACC,GACZ,IACMC,EADSN,EACOK,EAAME,QAAQJ,GAAK,GAAGD,SAC5C,OACE,yBAAKM,UAAU,kBACb,yBAAKC,IAAKH,EAAQI,IAAI,YACtB,4BAAKL,EAAME,QAAQI,MACnB,2BAAIN,EAAME,QAAQK,UCCTC,G,MARE,SAACR,GAAD,OACf,yBAAKG,UAAU,aACZH,EAAMS,SAASC,KAAI,SAACR,GAAD,OAClB,kBAAC,EAAD,CAAMS,IAAKT,EAAQJ,GAAII,QAASA,UCMvBU,G,MATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAChB,2BACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCCG,G,wDAtCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAOrC,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAC7B,GAAD,OACvCA,EAAQI,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAK7B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEU,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,SAAUqB,S,GAjCVI,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f02e101.chunk.js","sourcesContent":["const CARD_DATA = [\r\n  {\r\n    title: 'robo1',\r\n    imageUrl: 'images/1.png', // local file in public/images/\r\n    id: 1,\r\n  },\r\n  {\r\n    title: 'robo2',\r\n    imageUrl: 'images/2.png', // local file in public/images/\r\n    id: 2,\r\n  },\r\n  {\r\n    title: 'robo3',\r\n    imageUrl: 'images/3.png', // local file in public/images/\r\n    id: 3,\r\n  },\r\n  {\r\n    title: 'robo4',\r\n    imageUrl: 'images/4.png', // local file in public/images/\r\n    id: 4,\r\n  },\r\n  {\r\n    title: 'robo5',\r\n    imageUrl: 'images/5.png', // local file in public/images/\r\n    id: 5,\r\n  },\r\n  {\r\n    title: 'robo6',\r\n    imageUrl: 'images/6.png', // local file in public/images/\r\n    id: 6,\r\n  },\r\n  {\r\n    title: 'robo7',\r\n    imageUrl: 'images/7.png', // local file in public/images/\r\n    id: 7,\r\n  },\r\n  {\r\n    title: 'robo8',\r\n    imageUrl: 'images/8.png', // local file in public/images/\r\n    id: 8,\r\n  },\r\n  {\r\n    title: 'robo9',\r\n    imageUrl: 'images/9.png', // local file in public/images/\r\n    id: 9,\r\n  },\r\n  {\r\n    title: 'robo10',\r\n    imageUrl: 'images/10.png', // local file in public/images/\r\n    id: 10,\r\n  },\r\n];\r\n\r\nexport default CARD_DATA;\r\n","import React from 'react';\r\nimport CARD_DATA from './card.data';\r\nimport './card.styles.css';\r\n\r\nconst Card = (props) => {\r\n  const images = CARD_DATA;\r\n  const imgSrc = images[props.monster.id - 1].imageUrl;\r\n  return (\r\n    <div className='card-container'>\r\n      <img src={imgSrc} alt='monster' />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = (props) => (\r\n  <div className='card-list'>\r\n    {props.monsters.map((monster) => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className='search'\r\n    type='search'\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}